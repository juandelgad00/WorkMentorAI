# backend/agentes/agente_creativo.py
from .agente_base import AgenteBase
from langchain.prompts import ChatPromptTemplate
from langchain_core.output_parsers import JsonOutputParser, StrOutputParser
from pydantic import BaseModel, Field
from typing import List

# 1. Definimos la estructura de datos que queremos para el anÃ¡lisis de idoneidad
class AnalisisIdoneidad(BaseModel):
    calificacion_habilidades: int = Field(description="CalificaciÃ³n de 1 a 10 sobre quÃ© tan bien las habilidades del candidato se alinean con el puesto deseado.")
    calificacion_experiencia: int = Field(description="CalificaciÃ³n de 1 a 10 sobre la relevancia de la experiencia del candidato para el puesto. Si no hay experiencia, la calificaciÃ³n debe ser baja.")
    calificacion_estudios: int = Field(description="CalificaciÃ³n de 1 a 10 sobre la relevancia de los estudios del candidato para el puesto.")
    puntos_fuertes: List[str] = Field(description="Lista de 2 o 3 puntos fuertes clave del candidato para este puesto especÃ­fico.")
    puntos_debiles: List[str] = Field(description="Lista de 2 o 3 debilidades o Ã¡reas de mejora evidentes para este puesto.")
    sugerencias_mejora: List[str] = Field(description="Lista de 2 sugerencias concretas y accionables para que el candidato mejore su perfil para este puesto.")

class AgenteCreativo(AgenteBase):

    def _analizar_idoneidad(self, perfil: dict, puesto_deseado: str) -> dict:
        """
        Analiza el perfil del candidato en comparaciÃ³n con el puesto deseado y devuelve un anÃ¡lisis estructurado.
        """
        print(f"...[Analista] Comparando perfil con el puesto de '{puesto_deseado}'...")
        
        parser = JsonOutputParser(pydantic_object=AnalisisIdoneidad)
        
        prompt_analisis = ChatPromptTemplate.from_template(
            "Eres un 'Analista de Talento y Reclutador Senior' para el mercado colombiano. Tu tarea es realizar un anÃ¡lisis de idoneidad (fit-gap analysis) comparando el perfil de un candidato con un puesto de trabajo deseado. Debes ser objetivo, crÃ­tico y constructivo.\n\n"
            "**PUESTO OBJETIVO:** {puesto_deseado}\n\n"
            "**PERFIL DEL CANDIDATO:**\n"
            "*   **Experiencia:** {experiencia}\n"
            "*   **EducaciÃ³n:** {educacion}\n"
            "*   **Habilidades:** {habilidades}\n\n"
            "**INSTRUCCIONES:**\n"
            "1.  **Califica cada Ã¡rea (habilidades, experiencia, estudios) de 1 a 10**, donde 10 es un encaje perfecto. SÃ© realista; si no hay experiencia relevante, la calificaciÃ³n debe ser baja (1-3).\n"
            "2.  **Identifica los Puntos Fuertes:** Â¿QuÃ© hace que este candidato destaque para este rol?\n"
            "3.  **Identifica los Puntos DÃ©biles:** Â¿CuÃ¡les son las brechas mÃ¡s grandes entre su perfil y los requisitos del puesto?\n"
            "4.  **Ofrece Sugerencias Accionables:** Proporciona dos consejos concretos que el candidato podrÃ­a seguir para cerrar esas brechas (ej. 'Obtener una certificaciÃ³n en X', 'Realizar un proyecto personal para demostrar Y').\n"
            "5.  Devuelve tu anÃ¡lisis estrictamente en el formato JSON solicitado.\n\n"
            "{format_instructions}"
        )
        
        cadena_analisis = prompt_analisis | self.llm | parser
        
        analisis = cadena_analisis.invoke({
            "puesto_deseado": puesto_deseado,
            "experiencia": perfil.get('experiencia', 'No especificada'),
            "educacion": perfil.get('educacion', 'No especificada'),
            "habilidades": ", ".join(perfil.get('habilidades', [])),
            "format_instructions": parser.get_format_instructions()
        })
        
        return analisis

    def _generar_carta_ejemplo(self, perfil: dict, puesto_deseado: str, analisis: dict) -> dict:
        """
        Genera una carta de presentaciÃ³n de ejemplo (ES y EN) dirigida a una empresa ficticia,
        resaltando los puntos fuertes identificados en el anÃ¡lisis.
        """
        print("...[Creativo] Generando carta de presentaciÃ³n de ejemplo...")

        # Prompt para la carta en espaÃ±ol
        prompt_carta_es = ChatPromptTemplate.from_template(
            "Eres un escritor de documentos de carrera. Tu tarea es redactar una carta de presentaciÃ³n de ejemplo, profesional y persuasiva, para el puesto de **'{puesto_deseado}'**. La carta debe estar dirigida a una empresa colombiana ficticia pero realista (ej. 'TecnoSoluciones Andinas S.A.S.', 'LogÃ­stica Colombo-Global').\n\n"
            "**Usa esta informaciÃ³n para personalizar la carta:**\n"
            "*   **Nombre del Candidato:** {nombre}\n"
            "*   **Puntos Fuertes Clave (a resaltar en la carta):** {puntos_fuertes}\n"
            "*   **Resumen del Perfil:** {resumen_mejorado}\n\n"
            "**Estructura de la Carta:**\n"
            "1.  **Encabezado:** Fecha, Nombre del Candidato, Contacto.\n"
            "2.  **Destinatario:** 'Equipo de Recursos Humanos', [Nombre de la Empresa Ficticia], [Ciudad, Colombia].\n"
            "3.  **PÃ¡rrafo 1 (IntroducciÃ³n):** Expresa el interÃ©s en el puesto de '{puesto_deseado}'.\n"
            "4.  **PÃ¡rrafo 2 (Cuerpo):** Conecta los **puntos fuertes** identificados con las necesidades del puesto. Este es el pÃ¡rrafo mÃ¡s importante.\n"
            "5.  **PÃ¡rrafo 3 (Cierre):** Reitera el entusiasmo y llama a la acciÃ³n (solicitar una entrevista).\n"
            "6.  **Despedida:** 'Atentamente,', [Nombre del Candidato].\n\n"
            "Genera Ãºnicamente el texto completo de la carta en espaÃ±ol."
        )
        cadena_carta_es = prompt_carta_es | self.llm | StrOutputParser()
        carta_es = cadena_carta_es.invoke({
            "puesto_deseado": puesto_deseado,
            "nombre": perfil.get('nombre', 'El/La Candidato/a'),
            "puntos_fuertes": ", ".join(analisis.get('puntos_fuertes', [])),
            "resumen_mejorado": perfil.get('resumen_mejorado', '')
        })

        # TraducciÃ³n al inglÃ©s
        prompt_traduccion = ChatPromptTemplate.from_template(
            "You are a professional translator. Your task is to translate the following cover letter into natural, professional American English. Maintain the same structure and tone.\n\n"
            "**Spanish Text:**\n{texto_a_traducir}\n\n"
            "**English Translation:**"
        )
        cadena_traduccion = prompt_traduccion | self.llm | StrOutputParser()
        carta_en = cadena_traduccion.invoke({"texto_a_traducir": carta_es})
        
        return {"carta_es": carta_es, "carta_en": carta_en}


    def ejecutar(self, perfil: dict, puesto_deseado: str) -> dict:
        print("\nğŸ¤– Agente Creativo (Analista de Idoneidad): Iniciando proceso...")
        
        # 1. Realizar el anÃ¡lisis de idoneidad
        analisis_idoneidad = self._analizar_idoneidad(perfil, puesto_deseado)
        
        # 2. Generar las cartas de ejemplo basadas en el anÃ¡lisis
        cartas_ejemplo = self._generar_carta_ejemplo(perfil, puesto_deseado, analisis_idoneidad)
        
        # 3. Unir todos los resultados en un solo objeto
        resultado_final = {
            "analisis_idoneidad": analisis_idoneidad,
            "cartas_ejemplo": cartas_ejemplo
        }
        
        print("âœ… AnÃ¡lisis y artefactos creativos generados con Ã©xito.")
        return resultado_final